# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CSVTools
                                 A QGIS plugin
 Adds new processing algorithms and models that deal with CSV files
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-02-19
        copyright            : (C) 2019 by Yann Voté
        email                : ygversil@lilo.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Yann Voté'
__date__ = '2019-02-19'
__copyright__ = '(C) 2019 by Yann Voté'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from processing.algs.qgis.QgisAlgorithm import QgisAlgorithm
from qgis.core import (
    QgsFeatureSink,
    QgsProcessing,
    QgsProcessingException,
    QgsProcessingParameterBoolean,
    QgsProcessingParameterCrs,
    QgsProcessingParameterEnum,
    QgsProcessingParameterFeatureSink,
    QgsProcessingParameterFile,
    QgsProcessingParameterString,
    QgsVectorLayer,
)


class _AbstractLoadCSVAlgorithm(QgisAlgorithm):
    """Abstract QGIS algorithm that takes a CSV file and loads it as a vector
    layer."""

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    INPUT = 'INPUT'
    OUTPUT = 'OUTPUT'
    DELIMITER = 'DELIMITER'
    QUOTECHAR = 'QUOTE_CHAR'
    USE_HEADER = 'USE_HEADER'
    CRS = 'CRS'

    def initAlgorithm(self, config):
        """Initialize algorithm with inputs and output parameters."""
        self.addParameter(QgsProcessingParameterFile(
            self.INPUT,
            self.tr('Input CSV file'),
            extension='csv',
        ))
        self.delimiters = [',', ';', '|', 't']
        self.addParameter(QgsProcessingParameterEnum(
            self.DELIMITER,
            self.tr('Column delimiter'),
            options=self.delimiters,
            defaultValue=0,
        ))
        self.addParameter(QgsProcessingParameterString(
            self.QUOTECHAR,
            self.tr('Character used to quote columns'),
            defaultValue='"',
        ))
        self.addParameter(QgsProcessingParameterBoolean(
            self.USE_HEADER,
            self.tr('Is the first line headers ?'),
            defaultValue=True,
        ))
        self.addParameter(QgsProcessingParameterCrs(
            self.CRS,
            self.tr('CRS'),
        ))

    def groupId(self):
        """Algorithm group identifier."""
        return 'importfromcsv'

    def processAlgorithm(self, parameters, context, feedback):
        """Actual processing steps."""
        uri = self._buildUri(parameters, context)
        vlayer = QgsVectorLayer(uri, "layername", "delimitedtext")
        if not vlayer.isValid():
            raise QgsProcessingException(
                vlayer.dataProvider().error().message()
            )
        # We consider that having CSV data loaded is half the way
        feedback.setProgress(50)
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                                               context, vlayer.fields(),
                                               vlayer.wkbType(), vlayer.crs())
        if sink is None:
            raise QgsProcessingException(
                self.invalidSinkError(parameters, self.OUTPUT)
            )
        count = vlayer.featureCount()
        total = 100.0 / count if count else 0
        features = vlayer.getFeatures()
        for i, feature in enumerate(features):
            if feedback.isCanceled():
                break
            sink.addFeature(feature, QgsFeatureSink.FastInsert)
            # Update the progress bar
            feedback.setProgress(50 + int(i * total))
        return {self.OUTPUT: dest_id}


# TODO: write tests
class LoadWktCSVAlgorithm(_AbstractLoadCSVAlgorithm):
    """QGIS algorithm that takes a CSV file with WKT column and loads it as a
    vector layer."""

    WKT_FIELD = 'WKT_FIELD'

    def initAlgorithm(self, config):
        """Initialize algorithm with inputs and output parameters."""
        super().initAlgorithm(config)
        self.addParameter(QgsProcessingParameterString(
            self.WKT_FIELD,
            self.tr('Geometry column (as WKT)'),
        ))
        self.addParameter(QgsProcessingParameterFeatureSink(
            self.OUTPUT,
            self.tr('WKT CSV'),
            QgsProcessing.TypeVectorAnyGeometry
        ))

    def name(self):
        """Algorithm identifier."""
        return 'loadwktcsvfile'

    def displayName(self):
        """Algorithm human name."""
        return self.tr('Create vector layer from CSV (WKT column)')

    def group(self):  # Cannot be factored in abstract class because of i18n
        """Algorithm group human name."""
        return self.tr('Import from CSV')

    def _buildUri(self, parameters, context):
        """Build URI to pass to ``qgis.core.QgsVectorLayer`` from params."""
        csv_path = self.parameterAsFile(parameters, self.INPUT, context)
        delimiter = self.parameterAsEnum(parameters, self.DELIMITER, context)
        delimiter = self.delimiters[delimiter]
        quotechar = self.parameterAsString(parameters, self.QUOTECHAR, context)
        use_header = self.parameterAsBool(parameters, self.USE_HEADER,
                                          context)
        wkt_field = self.parameterAsString(parameters, self.WKT_FIELD, context)
        crs = self.parameterAsCrs(parameters, self.CRS, context)
        return ('file://{path}?delimiter={delimiter}&'
                'quote={quotechar}&'
                'useHeader={use_header}&'
                'trimFields=yes&'
                'wktField={wkt_field}&'
                'crs={crs}&'
                'spatialIndex=yes&'
                'watchFile=no').format(
                    path=csv_path,
                    delimiter=delimiter,
                    quotechar=quotechar,
                    use_header='yes' if use_header else 'no',
                    wkt_field=wkt_field,
                    crs=crs.authid(),
                )


# TODO: write tests
class LoadXyCSVAlgorithm(_AbstractLoadCSVAlgorithm):
    """QGIS algorithm that takes a CSV file with X, Y columns and loads it as a
    vector layer."""

    X_FIELD = 'X_FIELD'
    Y_FIELD = 'Y_FIELD'

    def initAlgorithm(self, config):
        """Initialize algorithm with inputs and output parameters."""
        super().initAlgorithm(config)
        self.addParameter(QgsProcessingParameterString(
            self.X_FIELD,
            self.tr('X/longitude column'),
        ))
        self.addParameter(QgsProcessingParameterString(
            self.Y_FIELD,
            self.tr('Y/latitude column'),
        ))
        self.addParameter(QgsProcessingParameterFeatureSink(
            self.OUTPUT,
            self.tr('XY CSV'),
            QgsProcessing.TypeVectorAnyGeometry
        ))

    def name(self):
        """Algorithm identifier."""
        return 'loadxycsvfile'

    def displayName(self):
        """Algorithm human name."""
        return self.tr('Create vector layer from CSV (X, Y columns)')

    def group(self):  # Cannot be factored in abstract class because of i18n
        """Algorithm group human name."""
        return self.tr('Import from CSV')

    def _buildUri(self, parameters, context):
        """Build URI to pass to ``qgis.core.QgsVectorLayer`` from params."""
        csv_path = self.parameterAsFile(parameters, self.INPUT, context)
        delimiter = self.parameterAsEnum(parameters, self.DELIMITER, context)
        delimiter = self.delimiters[delimiter]
        quotechar = self.parameterAsString(parameters, self.QUOTECHAR, context)
        use_header = self.parameterAsBool(parameters, self.USE_HEADER,
                                          context)
        crs = self.parameterAsCrs(parameters, self.CRS, context)
        x_field = self.parameterAsString(parameters, self.X_FIELD, context)
        y_field = self.parameterAsString(parameters, self.Y_FIELD, context)
        return ('file://{path}?delimiter={delimiter}&'
                'quote={quotechar}&'
                'useHeader={use_header}&'
                'trimFields=yes&'
                'xField={x_field}&'
                'yField={y_field}&'
                'crs={crs}&'
                'spatialIndex=yes&'
                'watchFile=no').format(
                    path=csv_path,
                    delimiter=delimiter,
                    quotechar=quotechar,
                    use_header='yes' if use_header else 'no',
                    x_field=x_field,
                    y_field=y_field,
                    crs=crs.authid(),
                )
